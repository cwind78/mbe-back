<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="main">
	<select id="loginCheck" parameterType="User" resultType="User">
		select user_id, user_password, user_name from user where user_id = #{user_id} and user_password = #{user_password}
	</select>
	
	<!-- duple id check -->
	<select id="dupleCheck" parameterType="User" resultType="User">
		select user_id from user where user_id = #{user_id}
	</select>
	
	<select id="getCommonCode" parameterType="java.util.HashMap" resultType="Code">
		select code_group, code, code_name, surplus1, surplus2, surplus3 from code
		where use_yn = 'Y'
		<choose>
            <when test="data.size != 0">
                and code_group in
                <foreach collection="data" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </when>
        </choose>
	</select>
	
	<insert id="signUp" parameterType="User">
		insert into user (
			user_id, user_password, user_name, nick_name, email, 
			domain, cellphone1, cellphone2, cellphone3, gender, 
			birth, photo, recommand_aggrement, information_aggrement, remark, 
			hobby1, hobby2, hobby3, job, area, 
			purpose1, purpose2, point, regist_user_id, push_message_aggrement, 
			email_aggrement
		) values (
			#{user_id}, #{user_password}, #{user_name}, #{nick_name}, #{email}, 
			#{domain}, #{cellphone1}, #{cellphone2}, #{cellphone3}, #{gender}, 
			#{birth}, #{photo}, #{recommand_aggrement}, #{information_aggrement}, #{remark}, 
			#{hobby1}, #{hobby2}, #{hobby3}, #{job}, #{area}, 
			#{purpose1}, #{purpose2}, #{point}, #{regist_user_id}, #{push_message_aggrement}, 
			#{email_aggrement}
		)
	</insert>
	
	<insert id="insertFilter" parameterType="Recommand_filter">
		insert into user_recommand_filter (
			user_id, filter_cd, filter_value, use_yn, regist_date, regist_user_id
		) values (
			#{regist_user_id}, #{filter_cd}, #{filter_value}, #{use_yn}, now(), #{regist_user_id}
		)
	</insert>
	
	<update id="updateFilter" parameterType="Recommand_filter">
		update user_recommand_filter set
			filter_cd = #{filter_cd}, 
			filter_value = #{filter_value}, 
			update_date = now(), 
			update_user_id = #{update_user_id}
		where
			seq_no = #{seq_no}
	</update>
	
	<delete id="deleteFilter" parameterType="Recommand_filter">
		delete from user_recommand_filter
		where
			seq_no = #{seq_no}
	</delete>
	
	<select id="getRecommandFilter" parameterType="Recommand_filter" resultType="Recommand_filter">
		select
			user_id, filter_cd, filter_value, use_yn, regist_date, regist_user_id, update_date, update_user_id, seq_no
		from user_recommand_filter
		where
			user_id = #{user_id}
	</select>
	
	<select id="getSurveyList" parameterType="Survey" resultType="Survey">
		select
			a.user_id, a.seq_no, a.survey_subject, a.start_date, a.end_date, a.config_value, a.user_value, a.survey_status, a.vote_yes, a.vote_no,
			a.due_time, ifnull(a.vote_yes, 0)+ifnull(a.vote_no, 0) vote
		from
			user_survey a
			left outer join user_survey_detail b on a.seq_no = b.survey_seq_no
		where
			a.user_id != #{user_id}
			and date_format(a.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d')
			and a.survey_status in ('1')
			and b.user_id is null
		order by a.regist_date desc
	</select>
	
	<select id="getMySurveyList" parameterType="Survey" resultType="Survey">
		select
			a.user_id, a.seq_no, a.survey_subject, a.start_date, a.end_date, a.config_value, a.user_value, a.survey_status, a.vote_yes, a.vote_no,
			a.due_time, ifnull(a.vote_yes, 0)+ifnull(a.vote_no, 0) vote
		from
			user_survey a
		where
			a.user_id = #{user_id}
		order by a.regist_date desc
	</select>
	
	<select id="getMaxUserValue" parameterType="Survey" resultType="Survey">
		select 
			case survey_status when '2' then truncate(user_value*0.7, 0)-1 else truncate(user_value/2*0.7, 0)-1 end user_value
        from 
        	user_survey a 
        where 
        	user_id = #{user_id}
        	and survey_status in ('2', '3')
        	and date_format(a.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d') 
        order by a.regist_date desc 
        limit 1
	</select>
	
	<select id="checkSurvey" parameterType="Survey" resultType="Integer">
		select case when doing_count > 0 || finished_count > 1 then 1 else 0 end from (
			select
				count(case when survey_status = '1' then 1 end) doing_count,
				count(case when survey_status = '2' or survey_status = '3' then 1 end) finished_count
			from 
				user_survey a 
			where 
				user_id = #{user_id}
				and survey_status != '0'
	        	and date_format(a.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d')
			) a
	</select>
	
	<insert id="insertSurvey" parameterType="Survey">
		insert into user_survey (
			user_id, survey_subject, start_date, end_date, config_value, 
			user_value, survey_status, regist_date, regist_user_id, 
			vote_yes, vote_no, due_time
		)
		select
			#{user_id}, #{survey_subject}, now(), date_add(now(), interval #{due_time} hour), 100,
			#{user_value}, '1', now(), #{user_id},
			0, 0, #{due_time}
	</insert>
	
	<select id="checkVote" parameterType="Survey" resultType="Integer">
		select count(*) from user_survey_detail where user_id = #{user_id} and survey_seq_no = #{seq_no}
	</select>
	
	<select id="checkSurveyForVote" parameterType="Survey" resultType="Integer">
		select count(*) from user_survey where seq_no = #{seq_no} and
		<![CDATA[
		((vote_yes + vote_no) >= user_value or end_date <= now())
		]]> 
	</select>
	
	<update id="updateVote" parameterType="Survey">
		update user_survey set
			survey_status = case when user_value = vote_yes + vote_no + 1 then '2' else survey_status end,
			vote_yes = vote_yes + case #{vote_yes_or_no} when 'Y' then 1 else 0 end,
			vote_no = vote_no + case #{vote_yes_or_no} when 'N' then 1 else 0 end,
			update_date = now(),
			update_user_id = #{user_id}
		where
			seq_no = #{seq_no}
	</update>
	
	<insert id="insertVoteDetail" parameterType="Survey">
		insert into user_survey_detail (
			user_id, survey_seq_no, vote_yes_or_no, point, regist_date, regist_user_id
		) values (
			#{user_id}, #{seq_no}, #{vote_yes_or_no}, 1, now(), #{user_id}
		)
	</insert>
	
	<insert id="insertUserPointWithSurvey" parameterType="Point">
		insert into user_point (
			user_id, route, point, adjustment, regist_date, regist_user_id
		) values (
			#{user_id}, #{route}, #{point}, #{adjustment}, now(), #{user_id}
		)
	</insert>
	
	<update id="updateUserPointWithSurveyVote" parameterType="User">
		update user set
			point = point + #{point},
			update_date = now(),
			update_user_id = #{user_id}
		where
			user_id = #{user_id}
	</update>
	
	<insert id="insertUserPointWithCard" parameterType="Card">
		insert into user_game_card (
			user_id, play_date, lucky_value, other_value, betting_point, paid_point, regist_user_id, regist_date
		) values (
			#{user_id}, now(), #{lucky_value}, #{other_value}, #{betting_point}, #{paid_point}, #{user_id}, now()
		)
	</insert>

	<select id="getUserPoint" parameterType="User" resultType="User">
		select
			point
		from
			user
		where
			user_id = #{user_id}
	</select>
	
	<select id="getUserPoints" parameterType="Point" resultType="Point">
		select 
			b.code_name route, a.point*a.adjustment point, date_format(a.regist_date, '%Y-%m-%d') regist_date
		from 
			user_point a join code b on a.route = b.code and b.code_group = 'PR'
		where 
			a.user_id = #{user_id}
		order by 
			a.regist_date desc
	</select>
	
	<insert id="insertRecommandUser" parameterType="User">
		insert into user_recommand (
			user_id, recommand_user_id, recommand_status, caution_yn, regist_date, regist_user_id,
			gender, age, hobby, job, area, purpose
		)
		select
			c.user_id,
			a.user_id,
			'1' recommand_status,
			case when e.user_id is null then 'N' else 'Y' end caution_yn,
			now(),
			#{user_id},
			count(case when b.filter_cd = 'UG' then 1 end) gender,
			count(case when b.filter_cd = 'UE' then 1 end) age,
			count(case when b.filter_cd = 'UH' then 1 end) hobby,
			count(case when b.filter_cd = 'UJ' then 1 end) job,
			count(case when b.filter_cd = 'UA' then 1 end) area,
			count(case when b.filter_cd = 'UP' then 1 end) purpose
		from
			user a join user_recommand_filter b on 
				b.user_id = #{user_id} and
		        a.user_id != b.user_id and
		        (
					(b.filter_cd = 'UG' and a.gender = b.filter_value)
		            or (b.filter_cd = 'UE' and (floor(datediff(a.birth, now())/365)*-1+1) between b.filter_value and b.filter_value + 9)
		            or (b.filter_cd = 'UH' and (a.hobby1 = b.filter_value or a.hobby2 = b.filter_value or a.hobby3 = b.filter_value))
		            or (b.filter_cd = 'UJ' and a.job = b.filter_value)
		            or (b.filter_cd = 'UA' and a.area = b.filter_value)
		            or (b.filter_cd = 'UP' and (a.purpose1 = b.filter_value or a.purpose2 = b.filter_value))
				)
			join user c on b.user_id = c.user_id
		    left outer join user_recommand d on c.user_id = d.user_id and date_format(d.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d')
		    left outer join (select user_id from user_caution where result = '2' group by user_id) e on a.user_id = e.user_id
		    left outer join user_recommand_denial f on a.user_id = f.denial_user_id and c.user_id = f.user_id and f.use_yn = 'Y'
		    left outer join user_recommand_denial g on a.user_id = g.user_id and c.user_id = g.denial_user_id and g.use_yn = 'Y'
		where
			b.use_yn = 'Y'
		    and a.recommand_aggrement = 'Y'
		    and c.recommand_aggrement = 'Y'
		    and d.user_id is null
		    and f.user_id is null
		    and g.user_id is null
		group by c.user_id, a.user_id, e.user_id
		limit 5;
	</insert>
	
	<select id="getRecommandUser" parameterType="User" resultType="Recommand_User">
		select a.seq_no, a.recommand_user_id, b.nick_name user_name, a.caution_yn, a.gender, a.age, a.hobby, a.job, a.area, a.purpose, b.photo
			, a.recommand_status
		from user_recommand a
			join user b on a.recommand_user_id = b.user_id 
		where a.user_id = #{user_id}
			and (
					(
						a.recommand_status in ('1') and date_format(a.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d')
					) or
					a.recommand_status in ('3', '4') 
				)
		order by a.regist_date desc
	</select>
	
	<update id="updateRecommandStatus" parameterType="Recommand_User">
		update user_recommand set recommand_status = #{recommand_status} where seq_no = #{seq_no}
	</update>
	
	<insert id="insertUserRecommandDenial" parameterType="Recommand_Denial">
		insert into user_recommand_denial (
			user_id, denial_user_id, use_yn, regist_date, regist_user_id
		) values (
			#{user_id}, #{denial_user_id}, 'Y', now(), #{user_id}
		)
	</insert>
	
	<select id="checkDenial" parameterType="User" resultType="Integer">
		select count(*) from user_recommand_denial a where date_format(a.regist_date, '%Y-%m-%d') = date_format(now(), '%Y-%m-%d')
			and a.user_id = #{user_id}
			and a.use_yn = 'Y'
	</select>
	
	<select id="calledMeRecommandedUser" parameterType="User" resultType="User">
		select 
			'receipt' classification, a.seq_no, c.nick_name, c.user_id, a.recommand_user_id, c.photo, c.job, c.area, c.hobby1, c.hobby2, c.hobby3, 
			c.purpose1, c.purpose2, c.gender, c.remark,
			case when d.user_id is null then 'N' else 'Y' end caution_yn,
			case when b.accept_user_id is null then 'N' else 'Y' end acceptance_yn
		from 
			user_recommand a
			left outer join user_recommand_acceptance b on a.recommand_user_id = b.accept_user_id
			join user c on a.user_id = c.user_id
			left outer join (select user_id from user_caution where result = '2' group by user_id) d on a.user_id = d.user_id
		where 
			a.recommand_status = '3' 
			and a.recommand_user_id = #{user_id}
		union all
		select 
			'send' classification, a.seq_no, c.nick_name, a.user_id, c.user_id recommand_user_id, c.photo, c.job, c.area, c.hobby1, c.hobby2, c.hobby3, 
			c.purpose1, c.purpose2, c.gender, c.remark, a.caution_yn,
			case when b.accept_user_id is null then 'N' else 'Y' end acceptance_yn
		from 
			user_recommand a
			join user_recommand_acceptance b on a.recommand_user_id = b.accept_user_id
			join user c on a.recommand_user_id = c.user_id
		where 
			a.recommand_status = '3' 
			and a.user_id = #{user_id}
	</select>
	
	<insert id="insertRecommandAcceptance" parameterType="User">
		insert into user_recommand_acceptance (
			recommand_seq_no, called_user_id, accept_user_id, regist_date, regist_user_id
		) values (
			#{seq_no}, #{user_id}, #{recommand_user_id}, now(), #{recommand_user_id}
		)
	</insert>
	
	<select id="checkExistToken" parameterType="User" resultType="Integer">
		select count(*) from user_token where user_id = #{user_id} and token = #{token}
	</select>
	
	<insert id="insertToken" parameterType="User">
		insert into user_token (user_id, token, regist_date, regist_user_id)
		values (
			#{user_id}, #{token}, now(), #{user_id}
		)
	</insert>
	
	<select id="getUserDeviceToken" parameterType="User" resultType="User">
		select token from user_token where user_id = #{user_id}
	</select>
</mapper>